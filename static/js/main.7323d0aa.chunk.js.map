{"version":3,"sources":["iniitial-data.js","task.js","column.js","index.js"],"names":["initialData","tasks","task-1","id","content","task-2","task-3","task-4","columns","column-1","title","taskIds","column-2","column-3","columnOrder","Container","styled","div","_templateObject","props","isDragDisabled","isDragging","Handle","_templateObject2","Task","_this","this","react_default","a","createElement","react_beautiful_dnd_esm","draggableId","task","index","provided","snapshot","Object","assign","draggableProps","dragHandleProps","ref","innerRef","React","Component","column_templateObject","Title","h3","column_templateObject2","TaskList","_templateObject3","isDraggingOver","InnerList","nextProps","map","task_Task","key","Column","column","column_Container","droppableId","type","direction","droppableProps","column_InnerList","placeholder","src_templateObject","_this$props","taskMap","taskId","column_Column","PureComponent","App","state","onDragStart","start","announce","concat","source","onDragUpdate","update","message","destination","onDragEnd","result","_objectSpread3","home","foreign","homeTaskIds","Array","from","splice","newHome","objectSpread","foreignTaskIds","newForeign","newState","defineProperty","setState","newTaskIds","newColumnOrder","_this2","src_Container","columnId","src_InnerList","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7323d0aa.chunk.js","sourcesContent":["const initialData = {\n    tasks: {\n        'task-1': { id:'task-1', content: 'Take out the garbage' },\n        'task-2': { id:'task-2', content: 'Watch my favourite show' },\n        'task-3': { id:'task-3', content: 'Charge my phone' },\n        'task-4': { id:'task-4', content: 'Cook dinner' }\n    },\n    columns:{\n        'column-1': {\n            id:'column-1',\n            title:'To do',\n            taskIds: ['task-1', 'task-2','task-3','task-4']\n        },\n        'column-2':{\n            id:'column-2',\n            title:'In progress',\n            taskIds: []\n        },\n        'column-3': {\n            id: 'column-3',\n            title: 'Done',\n            taskIds: []\n        }\n\n    },\n    columnOrder: ['column-1', 'column-2', 'column-3']\n\n}\n\nexport default initialData;","import React from 'react'\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\nconst Container = styled.div`\nborder: 1px solid lightgrey;\nborder-radius: 2px;\npadding: 8px;\nmargin-right: 8px;\nbackground-color: ${props => (props.isDragDisabled ? 'lightgrey': props.isDragging ? 'lightgreen' : 'white' )};\ndisplay: flex;\nflex-grow: 1;\n\n`;\n\nconst Handle = styled.div`\nwidth: 20px;\nheight: 20px;\nbackground-color: orange;\nborder-radius: 4px;\nmargin-right: 8px;\n`;\n\nexport default class Task extends React.Component {\n    render(){\n        // const isDragDisabled = this.props.task.id === 'task-1';\n        return(\n        <Draggable draggableId={this.props.task.id} index={this.props.index}>\n            {(provided, snapshot) => (\n\n                <Container\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n                ref={provided.innerRef}\n                isDragging= {snapshot.isDragging}\n                >\n                    <Handle />\n                {this.props.task.content}</Container>\n            )}\n            \n        </Draggable>);\n    }\n}","import React from 'react'\nimport styled from 'styled-components'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport Task from './task';\nconst Container = styled.div `\n  margin: 8px;\n  border: 1px solid lightgrey;\n  background-color: white;\n  border-radius: 2px;\n  display: flex;\n  flex-direction: column;\n`;\nconst Title = styled.h3 `\n  padding: 8px;\n`;\nconst TaskList = styled.div `\n  padding: 8px;\n  transition: background-color 0.2s ease;\n  background-color: ${props =>\n    props.isDraggingOver ? 'lightgrey' : 'inherit'};\n  flex-grow: 1;\n  min-height: 100px;\n  display: flex;\n`;\n\nclass InnerList extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.tasks === this.props.tasks) {\n      return false;\n    }\n    return true;\n  }\n  render() {\n    return this.props.tasks.map((task, index) => (\n      <Task key={task.id} task={task} index={index} />\n    ));\n  }\n}\n\nexport default class Column extends React.Component {\n  render() {\n    return (\n      <Draggable draggableId={this.props.column.id} index={this.props.index}>\n        {provided => (\n          <Container {...provided.draggableProps} ref={provided.innerRef}>\n            <Title {...provided.dragHandleProps}>\n              {this.props.column.title}\n            </Title>\n            <Droppable droppableId={this.props.column.id} type=\"task\" direction=\"horizontal\">\n              {(provided, snapshot) => (\n                <TaskList\n                  ref={provided.innerRef}\n                  {...provided.droppableProps}\n                  isDraggingOver={snapshot.isDraggingOver}\n                >\n                  <InnerList tasks={this.props.tasks} />\n                  {provided.placeholder}\n                </TaskList>\n              )}\n            </Droppable>\n          </Container>\n        )}\n      </Draggable>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport initialData from './iniitial-data';\nimport Column from './column';\n\nconst Container = styled.div`\ndisplay: flex;\nflex-grow: 1;\nflex-direction: column;`;\n\nclass InnerList extends React.PureComponent {\n  render() {\n    const { column, taskMap, index } = this.props;\n    const tasks = column.taskIds.map(taskId => taskMap[taskId]);\n    return <Column column={column} tasks={tasks} index={index} />;\n  }\n}\n\nclass App extends React.Component {\n  state = initialData;\n\n  onDragStart = (start, provided) => {\n    provided.announce(\n      `You have lifted the task in position ${start.source.index + 1}`,\n    );\n  };\n\n  onDragUpdate = (update, provided) => {\n    const message = update.destination\n      ? `You have moved the task to position ${update.destination.index + 1}`\n      : `You are currently not over a droppable area`;\n\n    provided.announce(message);\n  };\n\n  onDragEnd = (result, provided) => {\n    const message = result.destination\n      ? `You have moved the task from position\n        ${result.source.index + 1} to ${result.destination.index + 1}`\n      : `The task has been returned to its starting position of\n        ${result.source.index + 1}`;\n\n    provided.announce(message);\n\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (type === 'column') {\n      const newColumnOrder = Array.from(this.state.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      const newState = {\n        ...this.state,\n        columnOrder: newColumnOrder,\n      };\n      this.setState(newState);\n      return;\n    }\n\n    const home = this.state.columns[source.droppableId];\n    const foreign = this.state.columns[destination.droppableId];\n\n    if (home === foreign) {\n      const newTaskIds = Array.from(home.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newHome = {\n        ...home,\n        taskIds: newTaskIds,\n      };\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newHome.id]: newHome,\n        },\n      };\n\n      this.setState(newState);\n      return;\n    }\n\n    // moving from one list to another\n    const homeTaskIds = Array.from(home.taskIds);\n    homeTaskIds.splice(source.index, 1);\n    const newHome = {\n      ...home,\n      taskIds: homeTaskIds,\n    };\n\n    const foreignTaskIds = Array.from(foreign.taskIds);\n    foreignTaskIds.splice(destination.index, 0, draggableId);\n    const newForeign = {\n      ...foreign,\n      taskIds: foreignTaskIds,\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newHome.id]: newHome,\n        [newForeign.id]: newForeign,\n      },\n    };\n    this.setState(newState);\n  };\n\n  render() {\n    return (\n      <DragDropContext\n        onDragStart={this.onDragStart}\n        onDragUpdate={this.onDragUpdate}\n        onDragEnd={this.onDragEnd}\n      >\n        <Droppable\n          droppableId=\"all-columns\"\n          type=\"column\"\n        >\n          {provided => (\n            <Container\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {this.state.columnOrder.map((columnId, index) => {\n                const column = this.state.columns[columnId];\n                return (\n                  <InnerList\n                    key={column.id}\n                    column={column}\n                    taskMap={this.state.tasks}\n                    index={index}\n                  />\n                );\n              })}\n              {provided.placeholder}\n            </Container>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}